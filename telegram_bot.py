import os
import django

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import MessageHandler, Filters

from finite_state_machine import PythonMeetupBot
from transitions import MachineError

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
django.setup()

from meetup_db.models import Group, Guest, Event, Speech, Speaker
from meetup_db.models import get_events, get_groups, get_event_discription, \
    add_guest, get_user_status, get_speech_events, \
    get_event_speekers, get_guest, get_speaker


menu_button = ['–ú–µ–Ω—é']
menu_selection_buttons_for_user = ['üìã–ü—Ä–æ–≥—Ä–∞–º–º–∞', 'üó£–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '‚ùì–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã']
menu_selection_buttons_for_organisator = ['üìã–ü—Ä–æ–≥—Ä–∞–º–º–∞', 'üó£–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '‚ùì–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã']
menu_selection_buttons_for_speaker = ['üìã–ü—Ä–æ–≥—Ä–∞–º–º–∞', 'üó£–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É', '‚ùì–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã']
settings_buttons = ['‚úî–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏–∫–µ—Ä–∞',
                    '‚úî–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞',
                    '‚úî–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                    '‚ùå–£–¥–∞–ª–∏—Ç—å —Å–ø–∏–∫–µ—Ä–∞',
                     '‚ùå–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞',
                     '‚ùå–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                    'üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
program_buttons = []
events_buttons = []
main_back_button = ['üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
back_button = ['‚Ü©–ù–∞–∑–∞–¥']
speech_events_buttons = []
question_program_buttons = []
programs = []


def get_pretty_keyboard(buttons, rows_quantity):
    for button in range(0, len(buttons), rows_quantity):
        yield buttons[button: button + 1]


def set_keyboards_buttons(buttons):
    keyboard = []

    for button in buttons:
        keyboard.append(KeyboardButton(button))

    return keyboard


def get_keyboard(buttons, one_time_keyboard=False):
    reply_markup = ReplyKeyboardMarkup(
        keyboard=[set_keyboards_buttons(buttons)],
        resize_keyboard=True,
        one_time_keyboard=one_time_keyboard,
    )
    return reply_markup


def get_lists_of_buttons(buttons, rows_quantity):
    for button_number in range(0, len(buttons), rows_quantity):
        yield buttons[button_number: button_number + rows_quantity]


def get_pretty_keyboard(buttons, rows_quantity):

    reply_markup = ReplyKeyboardMarkup(
        keyboard=list(get_lists_of_buttons(buttons, rows_quantity)), resize_keyboard=True
    )
    return reply_markup


def send_message(update, message, reply_markup):
    update.message.reply_text(
        text=message,
        reply_markup=reply_markup,
    )


def get_main_menu_markup():

    if role == 'GUEST':
        reply_markup = get_pretty_keyboard(menu_selection_buttons_for_user, 3)
    if role == 'SPEAKER':
        reply_markup = get_pretty_keyboard(menu_selection_buttons_for_speaker, 3)
    if role == 'ORGANISATOR':
        reply_markup = get_pretty_keyboard(menu_selection_buttons_for_organisator, 3)

    bot.state = 'select_a_section'

    return reply_markup


def get_programs_menu():
    global program_buttons
    global programs
    programs = get_groups()
    program_buttons = list(programs.keys())

    message = '–ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞'
    reply_markup = get_pretty_keyboard(program_buttons + main_back_button, 2)


    return reply_markup, message, programs


def start(update, context):
    global bot, users_personal_data, role
    bot = PythonMeetupBot('Meetup')
    print(bot.state)
    users_personal_data = {
        'name': '',
        'telegram_id': ''
    }

    user = update.message.from_user

    reply_markup = ReplyKeyboardRemove()
    update.message.reply_text(
        text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ü§ñ.',
        reply_markup=reply_markup,
    )


    role = get_user_status(user['id'])
    if role:
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤: '
        reply_markup = get_main_menu_markup()
        send_message(update, message, reply_markup)

    else:

        keyboard = [
            [
                InlineKeyboardButton("–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ", callback_data='1'),
                InlineKeyboardButton("–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data='2'),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if user["last_name"]:
            update.message.reply_text(f'{user["first_name"]} {user["last_name"]} - —ç—Ç–æ –í–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è?',
                                    reply_markup=reply_markup)

        else:
            update.message.reply_text(f'{user["first_name"]} - —ç—Ç–æ –í–∞—à–µ –∏–º—è?',
                                    reply_markup=reply_markup)


def get_answer_name(update, context):

    query = update.callback_query
    query.answer()
    message_id = query.message.message_id
    users_personal_data['telegram_id'] = update['callback_query']['message']['chat']['id']

    if query.data == '1':
        users_first_name = update['callback_query']['message']['chat']['first_name']
        users_last_name = update['callback_query']['message']['chat']['last_name']
        users_personal_data['name'] = users_first_name + ' ' + users_last_name
        context.bot.delete_message(update.effective_chat.id, message_id)
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤: '
        reply_markup = get_keyboard(menu_selection_buttons_for_user)
        context.bot.sendMessage(update.effective_chat.id, text=message, reply_markup=reply_markup)
        add_guest(users_personal_data)
        bot.old_name()
        print(bot.state)
    else:
        query.edit_message_text(text='–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é')
        bot.new_name()
        print(bot.state)


def message_handler(update, context):

    text = update.message.text

    if text and bot.state == 'enter_name':
        global role
        role = 'GUEST'
        users_personal_data['name'] = text
        add_guest(users_personal_data)
        reply_markup = get_main_menu_markup()
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤: '

    if text in ['üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'] \
            and bot.state in ['select_a_section',
                              'go_to_programs',
                              'go_to_questions',
                              'go_to_my_questions',
                              'go_to_settings']:

        global questions
        reply_markup = get_main_menu_markup()
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤: '
        bot.state = 'select_a_section'

    if (text == 'üìã–ü—Ä–æ–≥—Ä–∞–º–º–∞' or text in back_button) and (bot.state == 'select_a_section' or bot.state == 'select_program'):

        global programs
        reply_markup, message, programs = get_programs_menu()
        bot.state = 'go_to_programs'
        print(bot.state)

    if (text in program_buttons) and (bot.state == 'go_to_programs'):

        global events_buttons
        global events
        program_id = programs[text]
        events = get_events(program_id)
        events_buttons = list(events.keys())
        message = '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è'
        reply_markup = get_pretty_keyboard(events_buttons + back_button, 2)
        bot.state = 'select_program'
        print(bot.state)

    if text in back_button and bot.state == 'select_description':
        message = '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è'
        reply_markup = get_pretty_keyboard(events_buttons + back_button, 2)
        bot.state = 'select_program'
        print(bot.state)

    if text in events_buttons and bot.state == 'select_program':
        event_id = events[text]
        event_description = get_event_discription(event_id)
        message = event_description
        reply_markup = get_keyboard(back_button)
        bot.description_selected()
        print(bot.state)

    if (text == 'üó£–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É' or text in back_button) and (bot.state == 'select_a_section' or bot.state == 'select_question'):

        global question_programs
        reply_markup, message, question_programs = get_programs_menu()
        bot.state = 'go_to_questions'
        print(bot.state)

    if (text in program_buttons) and (bot.state == 'go_to_questions'):

        global speech_events_buttons
        global speech_events

        question_program_id = question_programs[text]
        speech_events = get_speech_events(question_program_id)
        speech_events_buttons = list(speech_events.keys())
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è'
        reply_markup = get_pretty_keyboard(speech_events_buttons + back_button, 2)
        bot.state = 'select_question'
        print(bot.state)

    if text in speech_events_buttons and bot.state == 'select_question':
        speech_event_id = speech_events[text]
        event_speakers = get_event_speekers(speech_event_id)
        event_speaker_buttons = list(event_speakers.keys())
        message = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
        bot.question_selected()
        print(bot.state)
        reply_markup = get_pretty_keyboard(event_speaker_buttons + back_button, 2)

    if text in back_button and bot.state == 'select_speaker':
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–æ—Ç–æ–∫,'
        reply_markup = get_pretty_keyboard(events_buttons + back_button, 2)
        bot.state = 'select_question'
        print(bot.state)

    if text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏' and bot.state == 'select_a_section' and role == '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä':
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        reply_markup = get_pretty_keyboard(settings_buttons, 1)
        bot.settings()
        print(bot.state)

    if text == '‚ùì–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã' and bot.state == 'select_a_section' and role == '–°–ø–∏–∫–µ—Ä':
        questions_button = ['üìç–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']

        if questions:
            message = '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö –í–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤'
        else:
            message = '–í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'

        reply_markup = get_pretty_keyboard(questions_button, 2)


    if message:
        send_message(update, message, reply_markup)